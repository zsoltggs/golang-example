// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	validationmodels "github.com/zsoltggs/golang-example/services/validation-service/pkg/validationmodels"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// GetSchema provides a mock function with given fields: ctx, ID
func (_m *Database) GetSchema(ctx context.Context, ID string) (string, error) {
	ret := _m.Called(ctx, ID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSchema provides a mock function with given fields: ctx, request
func (_m *Database) UpsertSchema(ctx context.Context, request *validationmodels.UpsertSchemaRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *validationmodels.UpsertSchemaRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
