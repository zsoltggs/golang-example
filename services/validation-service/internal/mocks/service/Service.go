// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	validationmodels "github.com/zsoltggs/golang-example/services/validation-service/pkg/validationmodels"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetSchemaByID provides a mock function with given fields: ctx, request
func (_m *Service) GetSchemaByID(ctx context.Context, request *validationmodels.GetSchemaRequest) (*validationmodels.GetSchemaResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *validationmodels.GetSchemaResponse
	if rf, ok := ret.Get(0).(func(context.Context, *validationmodels.GetSchemaRequest) *validationmodels.GetSchemaResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validationmodels.GetSchemaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *validationmodels.GetSchemaRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSchema provides a mock function with given fields: ctx, req
func (_m *Service) UpsertSchema(ctx context.Context, req *validationmodels.UpsertSchemaRequest) (*validationmodels.UpsertSchemaResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *validationmodels.UpsertSchemaResponse
	if rf, ok := ret.Get(0).(func(context.Context, *validationmodels.UpsertSchemaRequest) *validationmodels.UpsertSchemaResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validationmodels.UpsertSchemaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *validationmodels.UpsertSchemaRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateDocument provides a mock function with given fields: ctx, req
func (_m *Service) ValidateDocument(ctx context.Context, req *validationmodels.ValidateRequest) (*validationmodels.ValidateResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *validationmodels.ValidateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *validationmodels.ValidateRequest) *validationmodels.ValidateResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validationmodels.ValidateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *validationmodels.ValidateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
